version: '3.8'

services:
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_NAME=postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_URL=localhost
      - DATABASE_PORT=5432
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-network
    command: >
      bash -c "
        # python scripts/reset_db.py &&
        # python scripts/load_data.py &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  frontend:
    build: 
      context: ../Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../Frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000  # Backend URL
      - CHOKIDAR_USEPOLLING=false  # Better for macOS performance
    stdin_open: true  # Enable interactive mode
    tty: true        # Enable terminal
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: ankane/pgvector:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    command: postgres -c 'listen_addresses=*'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge 